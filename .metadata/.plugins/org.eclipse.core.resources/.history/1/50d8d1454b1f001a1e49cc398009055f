package MarketPos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.swing.JOptionPane;

public class DB_administrator { // 관리자 쿼리문 수행 부분
	Connection conn = DBconnector2.getConnection();
	PreparedStatement pstm = null;
	ResultSet rs = null;
	public boolean checkPw(String inputPW) {
		//         Connection conn = null; // DB연결된 상태(세션)을 담은 객체
		//         PreparedStatement pstm = null;  // SQL 문을 나타내는 객체
		//         ResultSet rs = null;  // 쿼리문을 날린것에 대한 반환값을 담을 객체       
		try {

			String quary = "select * from administrator";             

			pstm = conn.prepareStatement(quary);
			rs = pstm.executeQuery();


			while (rs.next()) { //다음 방문할 값이 존재하는 동안 루프
				String pw = rs.getString("password"); // getInt(1)
				if(pw.equals(inputPW)) {
					System.out.println("관리자모드 로그인 성공 ");
					return true;
				}
			}
	
			pstm.close();

		} catch (SQLException se) {
			System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
		} finally {

		}
		return false;
	}
	//물품을 추가하는 메소드 
	public void addProduct(String barcode, String pname, String ptype, String pamount, String expiration,int price) {
		try {         
			String sql = " insert into product values('"+barcode+"','"+pname+"','" +ptype+"','"+ pamount +"','"+expiration +"' ,"+price+ ")" ;    
			pstm = conn.prepareStatement(sql);
			rs = pstm.executeQuery();

		} catch (SQLException se) {
			System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
		} finally {
		}      

		System.out.println( barcode + "\t" +pname+ "\t" +ptype+ "\t" +pamount + "\t" +expiration + "\t" + price + "제품 추가 완료");
	}
	 //상품 조회를 출력하는 메소드   - 0
	public ArrayList<String> pdisplay() {
		System.out.println("상품 조회 출력");
		ArrayList<String> data = new ArrayList<String>(); 
		data.add("바코드     제품이름      제품종류    수량   유통기한       가격\r\n");
		try {
			String sql =  "select * from product";
			pstm = conn.prepareStatement(sql);
			rs = pstm.executeQuery();


			while (rs.next()) { //다음 방문할 값이 존재하는 동안 루프
				String barcode = rs.getString("barcode");
				String pname = rs.getString("pname");
				String ptype = rs.getString("ptype");
				String pamount = rs.getString("pamount");
				String expiration = rs.getString("expiration");
				int price = rs.getInt("price");   

				int len_pname = pname.length()-14;
				int len_ptype = ptype.length()-12;

				System.out.println(len_pname);
				data.add(String.format("%-11s",barcode) + String.format("%"+len_pname+"s",pname) + String.format("%"+len_ptype+"s",ptype)+String.format("%-7s",pamount)+String.format("%-15s",expiration)+String.format("%s",price));
			}

		
		} catch (SQLException se) {
			System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
		} finally {

		}
		return data;

	}
	 //상품을 검색하는 메소드  - 0
	   public String psearch(String key) {
	      //System.out.println("상품 검색 출력");
	      String line ="no";
	      try {
	    	 String sql = "select * from product where barcode = '"+key+"'";
	    	 pstm = conn.prepareStatement(sql);
			 rs = pstm.executeQuery();
	         rs.next();      
	         
	        // System.out.println("바코드   제품이름   제품종류   제품수량   유통기한      가격");

	         String barcode = rs.getString("barcode");
	         String pname = rs.getString("pname");
	         String ptype = rs.getString("ptype");
	         String pamount = rs.getString("pamount");
	         String expiration = rs.getString("expiration");
	         int price = rs.getInt("price");   
	         line =barcode+"\t"+pname+"\t"+ptype+"\t"+pamount+"\t"+expiration+"\t"+price;
	         System.out.println(line);

	           

	      } catch (SQLException se) {
	    	  JOptionPane popup =new JOptionPane();
				popup.showMessageDialog(null, "찾으시는 제품이 없습니다.");
	      }   
	      return line;
	     
	   }
	   
	   //고객 조회를 출력하는 메소드  - 0
	   public ArrayList cdisplay() {
		   System.out.println("고객 조회 출력");
		      ArrayList<String> data = new ArrayList<String>(); 
		      data.add("이름      전화번호      회원등급   적립금   나이\r\n");
	     // System.out.println("이름   전화번호   회원등급   적립금   나이");
	      try {
	    	  String sql = "select * from customer";
	    	  pstm = conn.prepareStatement(sql);
	         rs = pstm.executeQuery();
	         rs.next();      
	         
	         while (rs.next()) { //다음 방문할 값이 존재하는 동안 루프

	            String cname = rs.getString("cname");
	            String phone = rs.getString("phone");
	            String grade = rs.getString("grade");
	            int saving = rs.getInt("saving");   
	            int age = rs.getInt("age");               
	            int len_cname = cname.length()-10;
	            data.add(String.format("%"+len_cname+"s",cname) + String.format("%-15s",phone) + String.format("%-10s",grade)+String.format("%-9s",saving)+String.format("%s",age));
	            
	         }

	      } catch (SQLException se) {
	         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
	      } finally {

	      }
	      return data;
	   }
	   
	 //고객을 검색하는 메소드  - 0
	   public String csearch(String key) {
	      //System.out.println("고객 검색 출력");
		   String line ="no";
	      try {
	      
	         String sql = "select * from customer where phone = '"+key+"'"; // excuteQuery 메소드를 이용하여 select 문을 실행
	         pstm = conn.prepareStatement(sql);
	         rs = pstm.executeQuery();
	         rs.next();      
	         //System.out.println("고객을 찾았습니다");
	        // System.out.println("이름   전화번호   회원등급   적립금   나이");         
	         String cname = rs.getString("cname");
	         String phone = rs.getString("phone");
	         String grade = rs.getString("grade");
	         int saving = rs.getInt("saving");
	         int age = rs.getInt("age");
	         line =cname+"\t"+phone+"\t"+grade+"\t"+saving+"\t"+age;
	         System.out.println(line);


	      } catch (SQLException se) {
	    	  JOptionPane popup =new JOptionPane();
				popup.showMessageDialog(null, "찾으시는 고객이 없습니다.");
	      } finally {

	      }
	      return line;
	   }



}
