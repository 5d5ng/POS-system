package MarketPos;


import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.swing.JOptionPane;


public class DBconnector {
   String url;
   BufferedWriter bw;//쓰기
   BufferedReader br;//읽기
   String urlbooks,urlcustomer,urlproduct,urladministrator;
   private Connection con = null; 
   private Statement stmt = null; 
   private ResultSet rs = null;
  
   static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver"; // jdbc 드라이버 주소 
   static final String DB_URL = "jdbc:mysql://203.247.166.201:3306/product?serverTimezone=UTC"; // DB 접속 주소 
   static final String USERNAME = "POS"; // DB ID 
   static final String PASSWORD = "qwe123"; // DB Password 
   
   //txt 파일로 연결
   
   private static DBconnector_기존 dbconnector = null;
   
   public static DBconnector_기존 getInstacne() {
	   if(dbconnector == null) {
		   dbconnector = new DBconnector_기존();
	   }
	   
	   return dbconnector;
   }
   
   public static boolean added_all = false; //구매를 완료하였는지 판단하기위해
   public static boolean chkCustomer = false; // 회원으로 결제할 것인지 아닌지 판단하기위해
   public static String phone = null; 
   public static int fee = 0;
   public static boolean check = false;  //결제를 완료하였는지 판단하기위해

   
   public static ArrayList<String> ShoppingBasket_Barcode = new ArrayList<String>(); //바코드 받을 리스트
   public static ArrayList<Integer> ShoppingBasket_Amount = new ArrayList<Integer>(); // 구매양 받을 리스트
   public static ArrayList<String> ShoppingBasket_Pname  = new ArrayList<String>(); // 제품 명 받을 리스트
   public static ArrayList<Integer> ShoppingBasket_Price =  new ArrayList<Integer>();  //상품 가격		
   
   public DBconnector() {
      System.out.print("User Table 접속 : "); 
      try { 
    	  
         Class.forName(JDBC_DRIVER); //Class 클래스의 forName()함수를 이용해서 해당 클래스를 메모리로 로드 하는 것입니다. //URL, ID, password를 입력하여 데이터베이스에 접속합니다. 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD); // 접속결과를 출력합니다.
         if (con != null){System.out.println("성공");} 
         else{System.out.println("실패");} } 
      catch (ClassNotFoundException e) { 
         System.out.println("Class Not Found Exection");
         e.printStackTrace(); } 
      catch (SQLException e) { 
         System.out.println("SQL Exception : " + e.getMessage());
         e.printStackTrace(); 
         } 
   }
   //관리자가 맞는지 확인하는 메소드   - 0 
   public boolean checkPw(String inputPW) {
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         rs = stmt.executeQuery("select * from administrator"); // excuteQuery 메소드를 이용하여 select 문을 실행
         while (rs.next()) { //다음 방문할 값이 존재하는 동안 루프
            String pw = rs.getString("password"); // getInt(1)
            if(pw.equals(inputPW)) {
               System.out.println("관리자모드 로그인 성공 ");
               return true;
            }
         }
         rs.close();
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }
      return false;

   }

   //물품을 추가하는 메소드  - 0
   public void addProduct(String barcode, String pname, String ptype, String pamount, String expiration,int price) {
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         String sql = " insert into product values('"+barcode+"','"+pname+"','" +ptype+"','"+ pamount +"','"+expiration +"' ,"+price+ ")" ;    
         stmt.executeUpdate(sql);

         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {
      }      

      System.out.println( barcode + "\t" +pname+ "\t" +ptype+ "\t" +pamount + "\t" +expiration + "\t" + price + "제품 추가 완료");
   }

   //상품 조회를 출력하는 메소드   - 0
   public ArrayList pdisplay() {
      System.out.println("상품 조회 출력");
      ArrayList<String> data = new ArrayList<String>(); 
      data.add("바코드     제품이름      제품종류    수량   유통기한       가격\r\n");
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from product"); // excuteQuery 메소드를 이용하여 select 문을 실행

         while (rs.next()) { //다음 방문할 값이 존재하는 동안 루프
            String barcode = rs.getString("barcode");
            String pname = rs.getString("pname");
            String ptype = rs.getString("ptype");
            String pamount = rs.getString("pamount");
            String expiration = rs.getString("expiration");
            int price = rs.getInt("price");   

            int len_pname = pname.length()-14;
            int len_ptype = ptype.length()-12;

            System.out.println(len_pname);
            data.add(String.format("%-11s",barcode) + String.format("%"+len_pname+"s",pname) + String.format("%"+len_ptype+"s",ptype)+String.format("%-7s",pamount)+String.format("%-15s",expiration)+String.format("%s",price));
         }
         rs.close();
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }
      return data;

   }

   //상품을 검색하는 메소드  - 0
   public String psearch(String key) {
      //System.out.println("상품 검색 출력");
      String line ="no";
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);

         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from product where barcode = '"+key+"'"); // excuteQuery 메소드를 이용하여 select 문을 실행
         rs.next();      
         
        // System.out.println("바코드   제품이름   제품종류   제품수량   유통기한      가격");

         String barcode = rs.getString("barcode");
         String pname = rs.getString("pname");
         String ptype = rs.getString("ptype");
         String pamount = rs.getString("pamount");
         String expiration = rs.getString("expiration");
         int price = rs.getInt("price");   
         line =barcode+"\t"+pname+"\t"+ptype+"\t"+pamount+"\t"+expiration+"\t"+price;
         System.out.println(line);

         rs.close();
         stmt.close();
      

      } catch (SQLException se) {
    	  JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "찾으시는 제품이 없습니다.");
      } catch (ClassNotFoundException cnfe) {
    	  JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "찾으시는 제품이 없습니다.");
      }   
      return line;
     
   }
   //고객 조회를 출력하는 메소드  - 0
   public ArrayList cdisplay() {
	   System.out.println("고객 조회 출력");
	      ArrayList<String> data = new ArrayList<String>(); 
	      data.add("이름      전화번호      회원등급   적립금   나이\r\n");
     // System.out.println("이름   전화번호   회원등급   적립금   나이");
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from customer"); // excuteQuery 메소드를 이용하여 select 문을 실행
         while (rs.next()) { //다음 방문할 값이 존재하는 동안 루프

            String cname = rs.getString("cname");
            String phone = rs.getString("phone");
            String grade = rs.getString("grade");
            int saving = rs.getInt("saving");   
            int age = rs.getInt("age");               
            int len_cname = cname.length()-10;
            data.add(String.format("%"+len_cname+"s",cname) + String.format("%-15s",phone) + String.format("%-10s",grade)+String.format("%-9s",saving)+String.format("%s",age));

         }

         rs.close();
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }
      return data;
   }

   //고객을 검색하는 메소드  - 0
   public String csearch(String key) {
      //System.out.println("고객 검색 출력");
	   String line ="no";
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from customer where phone = '"+key+"'"); // excuteQuery 메소드를 이용하여 select 문을 실행
         rs.next();      
         //System.out.println("고객을 찾았습니다");
        // System.out.println("이름   전화번호   회원등급   적립금   나이");         
         String cname = rs.getString("cname");
         String phone = rs.getString("phone");
         String grade = rs.getString("grade");
         int saving = rs.getInt("saving");
         int age = rs.getInt("age");
         line =cname+"\t"+phone+"\t"+grade+"\t"+saving+"\t"+age;
         System.out.println(line);

         rs.close();
         stmt.close();

      } catch (SQLException se) {
    	  JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "찾으시는 고객이 없습니다.");
      } catch (ClassNotFoundException cnfe) {
    	  JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "찾으시는 고객이 없습니다.");
      } finally {

      }
      return line;
   }


   //장부를 조회하는 메소드  - 0
   public ArrayList bdisplay() {
	   
      System.out.println("장부 출력");
      ArrayList<String> data = new ArrayList<String>(); 
      data.add("바코드   구매개수   제품이름   결제수단   가격\r\n");
      //System.out.println("바코드   구매개수   제품이름   결제수단   가격");
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);

         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from books"); // excuteQuery 메소드를 이용하여 select 문을 실행
         while(rs.next()) {                        
            String barcode = rs.getString("barcode");
            int amount = rs.getInt("amount");
            String pname = rs.getString("pname");
            String method = rs.getString("method");
            int price = rs.getInt("price");  
            int len_pname = pname.length() - 11;
            data.add(String.format("%-10s",barcode) + String.format("%-10s",amount) + String.format("%"+len_pname+"s",pname)+String.format("%-11s",method)+String.format("%s",price));

           

         }
         rs.close();
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }
      return data;
   }

   //회원을 등록하는 메소드  - 0
   public void addCustomer(String cname, String phone, char grade, int saving,int age) {
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         String sql = " insert into Customer values('"+cname+"','"+phone+"','"+ grade +"', "+ saving +" , "+age +  ")" ;    
         stmt.executeUpdate(sql);
         

         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다. 이미 존재하는 회원입니다 다시 시도해주세요" + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }      

      System.out.println(cname + "/" + phone  + "/" + grade   + "/"
            + saving  + "/" + age + "/ 회원 추가 완료");   
      
   }


   //구매가능한 상품인지 확인하는 메소드
   public int checkProduct(String item, int count) {
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);

         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from product where barcode = '"+item+"'"); // item 으로 바코드 확인하고       
         while(rs.next()) {
             String pamount = rs.getString("pamount");
             String exp = rs.getString("expiration");
             int price = rs.getInt("price");
             
             exp = exp.substring(0, exp.lastIndexOf('-')+3 );

             if(Integer.parseInt(pamount)<count) {
                System.out.println("재고가 부족합니다.");
                JOptionPane popup =new JOptionPane();
    			popup.showMessageDialog(null, "재고가 부족합니다.");
             }
             else if(!isValidExp(exp)) {
                System.out.println("유통기한이 지났습니다.");
                JOptionPane popup =new JOptionPane();
    			popup.showMessageDialog(null, "유통기한이 지났습니다.");
             }
             else {
                return price;
             }  
         }
          
         rs.close();
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {
      }
      return 0;
   }

   private boolean isValidExp(String exp) {
      Date today = new Date();
      SimpleDateFormat  format1 = new  SimpleDateFormat("yyyy-MM-dd");
      String present = format1.format(today);
      if(exp.compareTo(present)>=0 ) {
         return true;
      }

      return false;

   }
 
   //장부를 추가하는 메소드
   public void addBooks(String barcode, Integer amount, Integer price, String pname, String method) {
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);

         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         String sql = " insert into books values('"+barcode+"',"+ amount +",'" + pname +"','"+ method +"', "+price +  ")" ;    
         stmt.executeUpdate(sql);
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }      

      System.out.println(barcode + "/" + amount  + "/" + pname   + "/"
            + method  + "/" + price + "원/ 장부 추가 완료");   
   }


   //제품개수를 조정하는 메소드
   public void renew_pamount(ArrayList<String> item_list,ArrayList<Integer> count_list) {
	   for(int i = 0;i< item_list.size();i++) {
        String item = item_list.get(i);
           int count = count_list.get(i);
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);

         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         String chk = "SELECT barcode from PRODUCT  ";
         ResultSet rs = stmt.executeQuery(chk);
        
            //System.out.println(item+","+count);
            boolean flag = false;
         while(rs.next()) {
            String tempBarcode = rs.getString("barcode");
            if(tempBarcode.equals(item)) {
               flag = true;
               break;
            }
         }
         if(flag == true) {
            String sql = "UPDATE PRODUCT SET pamount = pamount -"+ count +" where barcode ='"+ item+"'"  ;
            stmt.executeUpdate(sql);
            System.out.println("재고가 조정되었습니다");
         }
         else {
            System.err.println("바코드와 일치하는 제품이 없습니다.");
         }
         
         
         stmt.close();
         rs.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }      
	   }

   }
   
 //제품개수를 추가하는 메소드   - 0
   public void update_pamount(String item,int count) {

      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);

         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         String chk = "SELECT barcode from PRODUCT  ";
         ResultSet rs = stmt.executeQuery(chk);
            //System.out.println(item+","+count);
            boolean flag = false;
         while(rs.next()) {
            String tempBarcode = rs.getString("barcode");
            if(tempBarcode.equals(item)) {
               flag = true;
               break;
            }
         }
         if(flag == true) {
            String sql = "UPDATE PRODUCT SET pamount = pamount +"+ count +" where barcode ='"+ item+"'"  ;
            stmt.executeUpdate(sql);
            JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "재고가 조정되었습니다!");
         }
         else {
        	 JOptionPane popup =new JOptionPane();
				popup.showMessageDialog(null, "찾으시는 제품이 없습니다.");
         }
         
         
         stmt.close();
         rs.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }      

   }

  //  전체 가격데이터를 넘기는  메소드 _ 콘솔용임 GUI에서 사용안한다
   public ArrayList<String> pricecalculation(ArrayList<String> item_list,int count) {    
      ArrayList<String> price_list = new ArrayList<String>();
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select barcode,price from product"); // excuteQuery 메소드를 이용하여 select 문을 실행
         while(rs.next()) {
            String barcode = rs.getString("barcode");
            int getPrice = rs.getInt("price");
            for(String target : item_list) {
               if(target.equals(barcode)) {
                  int val = count*getPrice;
                  price_list.add(Integer.toString(val));   
               }
            }            
         }
         rs.close();
         stmt.close();

      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다. (이름 데이터 오류)" + se.getMessage() );
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }
      return price_list;

   }
   
   
   //가격데이터 넘기는 매소드 제품 1개당 가격리스트를 넘김 
   public ArrayList<Integer> pricecalculation(ArrayList<String> item_list) {    
	      ArrayList<Integer> price_list = new ArrayList<Integer>();
	      try {
	         Class.forName(JDBC_DRIVER); 
	         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
	         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
	         ResultSet rs = stmt.executeQuery("select barcode,price from product"); // excuteQuery 메소드를 이용하여 select 문을 실행
	         while(rs.next()) {
	            String barcode = rs.getString("barcode");
	            int getPrice = rs.getInt("price");
	            for(String target : item_list) {
	               if(target.equals(barcode)) {
	                  int val = getPrice;
	                  price_list.add(val);   
	               }
	            }            
	         }
	         rs.close();
	         stmt.close();

	      } catch (SQLException se) {
	         System.err.println("SQL 수행중 에러가 발생했습니다. (이름 데이터 오류)" + se.getMessage() );
	      } catch (ClassNotFoundException cnfe) {
	         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
	      } finally {

	      }
	      return price_list;

	   }
  

   //상품이름데이터를 넘기는  메소드
   public String pnamecalculation(String item) {    
	   String data = "noname";

      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select pname from product where barcode = '"+item+"'"); // excuteQuery 메소드를 이용하여 select 문을 실행  
         rs.next();  
         String pname = rs.getString("pname");       
              
         data = pname;
                   
         rs.close();
         stmt.close();
      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다. (이름 데이터 오류)" + se.getMessage() );
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {

      }
   return data;

   }

   //회원인지 확인하는 메소드
   public boolean checkCustomer(String phone) {
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
         ResultSet rs = stmt.executeQuery("select * from customer where phone = '"+phone+"'"); // item 으로 바코드 확인하고 
         while(rs.next()) {         
            String target = rs.getString("phone");
            if(target.equals(phone)) {
               return true;
            }
         }
         rs.close();
         stmt.close();
         return false;
      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {
      }
      return false;
   }
   
   
   //상품이 있는지 확인하는 메소드
   public boolean checkBarcode(String barcode) {
	      try {
	         Class.forName(JDBC_DRIVER); 
	         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
	         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성
	         ResultSet rs = stmt.executeQuery("select * from product where barcode = '"+barcode+"'"); // item 으로 바코드 확인하고 
	         while(rs.next()) {         
	            String target = rs.getString("barcode");
	            if(target.equals(barcode)) {
	               return true;
	            }
	         }
	         rs.close();
	         stmt.close();
	         return false;
	      } catch (SQLException se) {
	         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
	      } catch (ClassNotFoundException cnfe) {
	         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
	      } finally {
	      }
	      return false;
	   }
   
   // 회원인 경우 계산  -- 적립금 쓸 때가 있어서 리턴타입바꿈 
   public void membercalculation() {
      String grade = "N";
      int saving = 0;   
      try {
         Class.forName(JDBC_DRIVER); 
         con = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         Statement stmt = con.createStatement(); //커넥션에서 statement 객체 생성

         ResultSet rs = stmt.executeQuery("select grade,saving from customer where phone = '"+phone+"'"); // item 으로 바코드 확인하고 

         rs.next();

         grade = rs.getString("grade");
         String prevGrade = grade;
         saving = rs.getInt("saving");

         switch (grade) {
         case "S":
            saving += fee * 0.05;
            break;
         case "A":
            saving += fee * 0.02;
            break;
         case "B":
            saving += fee * 0.01;
            break;
         default:
            System.out.println("시스템 오류");
            break;
         }

         grade = upgradeMemberShip(saving);

         String sql = "UPDATE CUSTOMER SET grade ='"+grade+"', saving = "+saving+" where phone = '"+phone+"'";
         stmt.executeUpdate(sql);
         if(!prevGrade.equals(grade)) {
        	 
            System.out.println("등급이 갱신 되었습니다 갱신된 등급:"+ grade);
            JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "등급이 갱신 되었습니다 갱신된 등급:"+ grade);	
         }

         System.out.println("적립금이 조정되었습니다 보유적립금:"+saving);
         JOptionPane popup =new JOptionPane();
			popup.showMessageDialog(null, "적립금이 조정되었습니다 보유적립금:"+saving);	

         rs.close();
         stmt.close();


      } catch (SQLException se) {
         System.err.println("SQL 수행중 에러가 발생했습니다." + se.getMessage());
      } catch (ClassNotFoundException cnfe) {
         System.err.println("드라이버 클래스를 찾을 수 없습니다." + cnfe.getMessage());
      } finally {
      }


   }
   public String upgradeMemberShip(int saving) {
	  
	   if(saving >= 1000.0)
           return "S";

        else if(saving>=500.0)
           return "A";

        else  return "B";
	   
	   
   }
   




}



