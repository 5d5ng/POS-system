package MarketPos;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

public class DBconnector {
	String url;
	BufferedWriter bw;//쓰기
	BufferedReader br;//읽기
	String urlbooks,urlcustomer,urlproduct,urladministrator;

	//txt 파일로 연결
	public DBconnector() {
		urlbooks = "books.txt";
		urlcustomer = "customer.txt";
		urlproduct = "product.txt";
		urladministrator = "administrator.txt";
	}
	
	//관리자가 맞는지 확인하는 메소드
	public boolean checkPw(String PW) {
		String lines="";
		try {
			br = new BufferedReader(new FileReader(urladministrator));	
				lines = br.readLine();
			br.close();//파일 닫기
		} catch (Exception e) {//예외처리
			// TODO Auto-generated catch bloc
			e.printStackTrace();
			return false;
		}
		
		if (lines.equalsIgnoreCase(PW)) {
		System.out.println("ok");
			return true; 
		}
		else
			return false;
	}

	//물품을 추가하는 메소드
	public void addProduct(String barcode, String pname, String ptype, String pamount, String expiration,int price) {

		try {
			bw = new BufferedWriter(new FileWriter(urlproduct, true));
			String data = barcode + "\t" +pname+ "\t" +ptype+ "\t" +pamount + "\t" +expiration + "\t" + price+ "\n";
			bw.write(data.toString());
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println( barcode + "\t" +pname+ "\t" +ptype+ "\t" +pamount + "\t" +expiration + "\t" + price + "/ 추가 완료");
	}
	
	//상품 조회를 출력하는 메소드
	public void pdisplay() {
		System.out.println("상품 조회 출력");
		try {
			System.out.println("바코드	제품이름	제품종류	제품수량	유통기한		가격");
			br = new BufferedReader(new FileReader(urlproduct));
			while (true) {
				String lines = br.readLine();
				if (lines == null) {
					break;
				} else 
					System.out.println(lines);// 출력
			}
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	//상품을 검색하는 메소드
    public void psearch(String key) {
		System.out.println("상품 검색 출력");
    	try {
			br = new BufferedReader(new FileReader(urlproduct));
			while (true) {
				String lines = br.readLine();
				if (lines == null) {
					System.out.println("찾으시는 상품이 없습니다.");
					break;
				}
				else if (lines.split("\t")[0].equals(key)) {//입고 내용이면
					    System.out.println("상품을 찾았습니다");
					    System.out.println("바코드	제품이름	제품종류	제품수량	유통기한		가격");
						System.out.println(lines);// 출력
						break;
				}
			}
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
  //고객 조회를 출력하는 메소드
  	public void cdisplay() {
  		System.out.println("고객 조회 출력");
  		try {
  			System.out.println("이름	전화번호	회원등급	적립금	나이");
  			br = new BufferedReader(new FileReader(urlcustomer));
  			while (true) {
  				String lines = br.readLine();
  				if (lines == null) {
  					break;
  				} else 
  					System.out.println(lines);// 출력
  			}
  			br.close();
  		} catch (Exception e) {
  			e.printStackTrace();
  		}
  		
  	}

  	//고객을 검색하는 메소드
      public void csearch(String key) {
  		System.out.println("고객 검색 출력");
  		try {
			br = new BufferedReader(new FileReader(urlcustomer));
			while (true) {
				String lines = br.readLine();
				if (lines == null) {
					System.out.println("찾으시는 고객이 없습니다.");
					break;
				}
				else if (lines.split("\t")[1].equals(key)) {//입고 내용이면
					    System.out.println("고객을 찾았습니다");
						System.out.println("이름	전화번호	회원등급	적립금	나이");
						System.out.println(lines);// 출력
						break;
				}
			}
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
      }
    	public void bdisplay() {
      		System.out.println("장부 출력");
      		try {
      			System.out.println("바코드	구매개수	제품이름	결제수단	가격");
      			br = new BufferedReader(new FileReader(urlbooks));
      			while (true) {
      				String lines = br.readLine();
      				if (lines == null) {
      					break;
      				} else 
      					System.out.println(lines);// 출력
      			}
      			br.close();
      		} catch (Exception e) {
      			e.printStackTrace();
      		}
      		
      	}

    	//회원을 등록하는 메소드
    	public void addCustomer(String cname, String phone, char grade, int saving,int age) {
    		try {
    			bw = new BufferedWriter(new FileWriter(urlcustomer, true));
    			String data = cname + "\t" +phone+ "\t" + grade + "\t" +saving + "\t" + age+ "\n";
    			bw.write(data.toString());
    			bw.newLine();
    			bw.flush();
    			bw.close();
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    		System.out.println(cname + "/" + phone  + "/" + grade   + "/"
    				+ saving  + "/" + age + "/ 추가 완료");
    	}
    	
    	
    	//구매가능한 상품인지 확인하는 메소드
    	public boolean checkProduct(String item, int count) {
    		try {
    			br = new BufferedReader(new FileReader(urlproduct));//물품 파일 읽기
    			while (true) {
    				String lines = br.readLine();
    				if (lines == null) {
    					System.out.println("찾으시는 제품이 없습니다.");
    					break;
    				} else if (lines.split("\t")[0].equals(item)) {
    					int pamount = Integer.parseInt(lines.split("\t")[3]);
    					if(pamount >= count ) {
    					System.out.println("구매가능한 상품");	
    					renew_pamount(count);
    					return true;
    					}
    					else System.out.println("상품재고가 부족합니다");
    					break;
    				}	
    			}   
    		} catch (Exception e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    		return false;
    	}

    	
    	//제품개수를 조정하는 메소드
		private void renew_pamount(int count) {
			System.out.println("재고가 조정되었습니다");
			}
		
		//가격데이터를 넘기는  메소드
		public ArrayList pricecalculation(ArrayList<String> item_list) {	 
	
			ArrayList<String> price_list = new ArrayList<String>();
			try {
				br = new BufferedReader(new FileReader(urlproduct));//물품 목록을 읽어옴.
				for (int i = 0; i < item_list.size(); i++) {
				while (true) {
					String lines = br.readLine();
					if (lines == null) {
						break;
					} else {
						if(item_list.get(i).equals(lines.split("\t")[0])){
							price_list.add(lines.split("\t")[5]);
							break;
						}								
						}			
					}
				}
				br.close();
			} catch (Exception e) {
				// TODO Auto-generated catch bloc
				e.printStackTrace();
			}
			return price_list;
		
		}
		
		//상품이름데이터를 넘기는  메소드
		public ArrayList pnamecalculation(ArrayList<String> item_list) {	 
	
			ArrayList<String> pname_list = new ArrayList<String>();
			try {
				br = new BufferedReader(new FileReader(urlproduct));//물품 목록을 읽어옴.
				for (int i = 0; i < item_list.size(); i++) {
				while (true) {
					String lines = br.readLine();
					if (lines == null) {
						break;
					} else {
						if(item_list.get(i).equals(lines.split("\t")[0])){
							pname_list.add(lines.split("\t")[1]);
							break;
						}								
						}			
					}
				}
				br.close();
			} catch (Exception e) {
				// TODO Auto-generated catch bloc
				e.printStackTrace();
			}
			return pname_list;
		
		}
		
		//회원인지 확인하는 메소드
		public boolean checkCustomer(String phone) {
			try {
    			br = new BufferedReader(new FileReader(urlcustomer));//물품 파일 읽기
    			while (true) {
    				String lines = br.readLine();
    				if (lines == null) {
    					System.out.println("회원이 아닙니다.");
    					break;
    				} else if (lines.split("\t")[1].equals(phone)) {
    					return true;
    					}
    					break;
    				}	  
    		} catch (Exception e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    		return false;
		}
		
       // 회원인 경우 계산 
		public void membercalculation(String phone,int fee) {
			String grade = "N";
			double nowsaving=0;
			String nowgrade;
			double saving=0;
			try {
    			br = new BufferedReader(new FileReader(urlcustomer));//물품 파일 읽기
    			while (true) {
    				String lines = br.readLine();
    				if (lines == null) {
    					System.out.println("회원이 아닙니다.");
    					break;
    				} else if (lines.split("\t")[1].equals(phone)) {
    					grade = lines.split("\t")[2];
    					saving = Integer.parseInt(lines.split("\t")[3]);
    					System.out.println(lines.split("\t")[0]+"회원님은 회원등급 "+grade+" 적립금 " +saving+" 입니다." );
    					break;
    					}
    					break;
    				}	  
    		} catch (Exception e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
			
			switch (grade) {
			case "S":
				nowsaving = saving + fee * 0.05;
				break;
			case "A":
				nowsaving = saving +fee * 0.02;
				break;
			case "B":
				nowsaving = saving +fee * 0.01;
				break;
			default:
				System.out.println("시스템 오류");
				break;
			}
			
			if(nowsaving >= 1000.0)
				nowgrade = "S";
			else if(nowsaving>=500.0)
				nowgrade = "A";
			else 	nowgrade = "B";
			
			renew_saving(nowsaving);
			if(!grade.equals(nowgrade))
			renew_grade(nowgrade);
    		
		}

	private void renew_grade(String nowgrade) {
		System.out.println("등급이 갱신 되었습니다");
		}

	private void renew_saving(double nowsaving) {
		System.out.println("적립금이 조정되었습니다");
	}

	public void addBooks(String barcode, Integer amount, String price, String pname, String method) {
		try {
			bw = new BufferedWriter(new FileWriter(urlbooks, true));
			String data = barcode + "\t" +amount+ "\t" + pname + "\t" +method + "\t" + price+ "\n";
			bw.write(data.toString());
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(barcode + "\t" +amount+ "\t" + pname + "\t" +method + "\t" + price + "/ 추가 완료");
		
	}

	


    	
}


    
	
